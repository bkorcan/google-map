Intersection(
  Filter(
    Select("data", Paginate(Match("amount_all_kas"), { size: 2000 })),
    Lambda("x", GT(Var("x"), 700))
  ),
  Filter(
    Select("data", Paginate(Match("amount_all_kas"), { size: 2000 })),
    Lambda("x", LT(Var("x"), 800))
  )

Intersection(
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 700))
  ),
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", LTE(Select(1,Var("x")), 800))
  )
)
  

  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", GT(Select(1,Var("x")), 700))
  )



  Filter(
    Select("data", Paginate(Match("test"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 4) )
  )

  Intersection(
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 400))
  ),
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", LTE(Select(1,Var("x")), 800))
  )
)
#Get All Ref Ids Greater than 6 people

  Map(
Filter(
    Select("data", Paginate(Match("test"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 6) )
  ),Lambda('x', Select(0, Var('x')))
)
#Get All Ref Ids between price 400 to 800
Map( Intersection(
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 400))
  ),
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", LTE(Select(1,Var("x")), 800))
  )
), Lambda('y', Select(0, Var('y')))
)

#Intersction  Ref Ids people Greater than 6 and Price Between 400 800
Intersection(
  Map( Intersection(
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 400))
  ),
  Filter(
    Select("data", Paginate(Match("all_amount_id_kas"), { size: 2000 })),
    Lambda("x", LTE(Select(1,Var("x")), 800))
  )
), Lambda('y', Select(0, Var('y')))
),
Map(
Filter(
    Select("data", Paginate(Match("test"), { size: 2000 })),
    Lambda("x", GTE(Select(1,Var("x")), 6) )
  ),Lambda('x', Select(0, Var('x')))
)
)
# Update

# Get Item data
Get( Ref( Collection('kas'), '330122336051136075' )  )
Update( Ref( Collection('kas'), '330286436829889100' ), {data: { date:[] } }  )
Update( Ref( Collection('kas'), '330122336051136075' ), {data: { date:[[250,'23May22'],[260,'24May22']] } }  )

Select ('data',Get( Ref( Collection('kas'), '330122336051136075' ) ) )
#Select date 
Select('date',Select ('data',Get( Ref( Collection('kas'), '330122336051136075' ) ) ))
#Append data to date and Update
Append([350,'26May22'], Select('date',Select ('data',Get( Ref( Collection('kas'), '330122336051136075' ) ) )) )
// Create And Update Date
Update( Ref( Collection('kas'), '330286436829889100' ), {data: { date:[] } }  )

Update(Ref(Collection("kas"), "330286436829889100"), {
  data: {
    date: Append(
      [[650, "01Jun22"],[300, "2Jun22"]],
      Select(
        "date",
        Select("data", Get(Ref(Collection("kas"), "330286436829889100")))
      )
    )
  }
})


#  Empty date field by given date
Map(
Select(
        "date",
        Select("data", Get(Ref(Collection("kas"), "330286436829889100")))
        ),Lambda('x',  If(Not(Equals(['4Jun22'], [Select(1,Var('x'))]  )  ), Var('x'),[] )   )
      )
#Multiple Empty date field by given Dates
 Intersection(
  Map(
    [["01Jun22"], ["4Jun22"], ["5Jun22"], ["6Jun22"]],
    Lambda(
      "y",
      Map(
        Select(
          "date",
          Select("data", Get(Ref(Collection("kas"), "330286436829889100")))
        ),
        Lambda(
          "x",
          If(Not(Equals(Var("y"), [Select(1, Var("x"))])), Var("x"), [])
        )
      )
    )
  )
)    